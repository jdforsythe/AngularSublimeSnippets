<snippet>
	<content><![CDATA[
(function() {
	function AuthFactory($http, $location, SessionFactory, $sanitize, csrf_token) {

		var cacheSession = function(response) {
			SessionFactory.setUser(response.id, response.username);
		};

		var uncacheSession = function() {
			SessionFactory.unsetUser();
		};

		var sanitizeCredentials = function(credentials) {
			return {
				username: $sanitize(credentials.username),
				password: $sanitize(credentials.password),
				csrf_token: csrf_token
			};
		};

		return {
			login: function(credentials) {
				return $http.post('/auth/login', sanitizeCredentials(credentials))
							.success(cacheSession);
			},
			logout: function() {
				return $http.get('/auth/logout')
							.success(uncacheSession);
			},
			userIsLoggedIn: function() {
				return SessionFactory.get('authenticated');
			},
			getCurrentUser: function() {
				return {
					id: SessionFactory.get('id'),
					username: SessionFactory.get('username')
				};
			}
		};
	}
	app.factory('AuthFactory', AuthFactory);
})();

(function() {
	function SessionFactory() {
		// polyfill if browser doesn't support SessionStorage?
		return {
			get: function(key) {
				return sessionStorage.getItem(key);
			},
			set: function(key, value) {
				return sessionStorage.setItem(key, value);
			},
			unset: function(key) {
				return sessionStorage.removeItem(key);
			},
			setUser: function(id, username) {
				sessionStorage.setItem('authenticated', true);
				sessionStorage.setItem('id', id);
				sessionStorage.setItem('username', username);
			}
		};
	}
	app.factory('SessionFactory', SessionFactory);
})();
]]></content>
	<tabTrigger>ngauth</tabTrigger>
	<scope>source.js, source.js.embedded.html, text.plain</scope>
</snippet>